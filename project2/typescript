Script started on Mon 23 Feb 2015 08:16:49 PM EST
]0;elc3@cray: ~/workspace/cs112/project2elc3@cray:~/workspace/cs112/project2$ ls
array.cpp      array.h          ArrayTester.h  main.cpp
arrayData.txt  ArrayTester.cpp  [0m[01;34mDebug[0m          typescript
]0;elc3@cray: ~/workspace/cs112/project2elc3@cray:~/workspace/cs112/project2$ cat array.cpp
/* array.cpp defines "C style" array operations
 * Name: Ethan Clark
 * Date: February 22, 2015
 * Begun by: Joel Adams, for CS 112 at Calvin College.
 */

//Includes for the array.cpp file
#include "array.h"

/*
 * initialize() initializes an array with size (a number) values.
 * @param: array of doubles, size of the array
 */
void initialize(double *a, int size) {
	int val = 0;
	for (int i = 0; i < size; i++) {
		val = i+1;
		a[i] = val;
	}
}

/*
 * Print() outputs the elements of the array in the console.
 * @param: array of doubles, size of the array
 * Precondition: Array must be initialized with size values
 * Postcondition: Array's elements are output on the console.
 */
void print(double *a, int size) {
	for (int i = 0; i < size; i++) {
		cout << *a << '\t';
		a++;
	}
}		

/*
 * Average() returns the average of an array of doubles.
 * @param: array of doubles, size of the array
 * @return: double variable containing the average of the array's elements
 */
double average(double *a, int size) {
	double val = 0;
	for (int i = 0; i < size; i++) {
		val = val + *a;
		a++;
	}
	double average;
	average = val / size;
	return average;
}
/*
 * Sum() returns the sum of the elements in an array of doubles.
 * @param: array of doubles, size of the array
 * @return: double variable containing the sum of the array's elements
 */
double sum(double *a, int size) {
	double val = 0;
	for (int i = 0; i < size; i++) {
		val = val + *(a+i);
	}
	return val;
}

/*
 * read() reads in values from a file and assigns them to a.
 * @param: input stream, array of doubles, size of the array
 * Precondition: An open input stream to a file, an initialized array
 * Postcondition: array a now contains the values from the file
 */
void read(istream& in, double *a,int size) {
	for ( int i = 0; i < size; i++ ) {
		in >> *a;
		a++;
	}
}

/*
 * fill() opens an input stream, stores the addresses of the values into a
 * @param: Filename (the name of a file), an array of doubles, size for the array
 * 				for the new elements
 * Precondition: Filename must be the name of a text file, array must be initialized
 * Postcondition: array a contains addresses of the values from the file
 */
void fill(const string& Filename, double *&a, int &numValues) {
	ifstream fin( Filename.c_str() );
	assert ( fin.is_open() );

	delete [] a;

	fin >> numValues;

	a = new double[numValues];

	for ( int i = 0; i < numValues; i++ ) {
		fin >> a[i];
	}

	fin.close();

}

/*
 * resize() changes the size of the original array to the new size.
 * @param: array of doubles, size of the old array, size of the new array
 * Precondition: array must be initialized
 * Postcondition: array either adds on the new elements from the existing elements
 * 					or it truncated the elements if the new size < the old size
 */
void resize(double *&a, int oldSize, int newSize) {
	if (newSize >= oldSize) {
		double* newArr = new double[newSize]();
		for ( int i = 0; i < oldSize; i++) {
			newArr[i] = a[i];
		}

		delete [] a;
		a = newArr;
	}

	if (oldSize > newSize) {
		double* newArr = new double[newSize];
		for ( int i = 0; i < newSize; i++) {
			newArr[i] = a[i];
		}

		delete [] a;
		a = newArr;
	}
}

/*
 * concat() combines two arrays into a third array containing the elements of the first
 * 			array first and then the elements of the second array.
 * @param: three arrays of doubles, sizes of all those arrays
 * Precondition: all three arrays initialized properly
 * Postcondition: array a3 contains both the elements from array a1 and array a2
 */
void concat(double *a1, int size1, double *a2, int size2, double *&a3, int &size3) {
	size3 = size1 + size2;

	double* newArr = new double[size3];

	for ( int i = 0; i < size1; i++ ) {
		newArr[i] = *a1;
		a1++;
	}

	for ( int i = size1; i < size3; i++ ) {
		newArr[i] = *a2;
		a2++;
	}

	delete [] a3;
	a3 = newArr;
}
]0;elc3@cray: ~/workspace/cs112/project2elc3@cray:~/workspace/cs112/project2$ cat array.h
/* array.h declares "C style" array operations.
 * Name: Ethan Clark
 * Date: February 22, 2015
 * Begun by: Joel Adams, for CS 112 at Calvin College.
 */
 
//All includes for the array files.
#include <iostream>
#include <cassert>
#include <vector>
#include <fstream>
using namespace std;

//Declaring the prototypes for all the array methods.
void initialize(double *a, int size);

void print(double *a, int size);

double average(double *a, int size);

double sum(double *a, int size);

void read(istream& in, double *a,int size);

void fill(const string& Filename, double *&a, int &numValues);

void resize(double *&a, int oldSize, int newSize);

void concat(double *a1, int size1, double *a2, int size2, double *&a3, int &size3);
]0;elc3@cray: ~/workspace/cs112/project2elc3@cray:~/workspace/cs112/project2$ cat ar[K[KArrayTester.cpp
/* ArrayTester.cpp defines the methods to test C-style array operations.
 * Student: Ethan Clark
 * Date: February 22, 2015
 * By: Joel Adams, for CS 112 at Calvin College.
 */
 
//Includes for the array tester program.
#include "ArrayTester.h"
#include <fstream>
using namespace std;

//Constructor for the ArrayTester class.
ArrayTester::ArrayTester() {
	a1 = a2 = a3 = NULL;
}

ArrayTester::~ArrayTester() {
        cleanup();
}

void ArrayTester::cleanup() {
	delete [] a1; a1 = NULL;
	delete [] a2; a2 = NULL;
	delete [] a3; a3 = NULL;
}

//Method to run all the tests for the array methods.
void ArrayTester::runTests() {
	testInitialize();
	testPrint();
	testAverage();
	testSum();
	testResize();
	testConcat();
	testFill();
	testRead();
	cout << "All tests passed!" << endl;
}

//Setup the arrays needed for the testing methods in this class.
void ArrayTester::setup() {
	a1 = new double[3];
	for (int i = 0; i < 3; i++) {
		a1[i] = i+1;
	}
	a2 = new double[4];
	for (int i = 0; i < 4; i++) {
		a2[i] = i+2;
	}
	a3 = new double[5];
	for (int i = 0; i < 5; i++) {
		a3[i] = i+3;
	}
}

//Method that tests the initializing of the arrays.
void ArrayTester::testInitialize()  {
	cout << "Testing initialize()... " << flush;
	setup();
	initialize(a1, 3);
	for (int i = 0; i < 3; i++) {
		assert( a1[i] == i+1 );
	}
	initialize(a2, 4);
	for (int i = 0; i < 4; i++) {
		assert( a2[i] == i+1 );
	}
	initialize(a3, 5);
	for (int i = 0; i < 5; i++) {
		assert( a3[i] == i+1 );
	}
        cleanup();
	cout << "Passed!" << endl;
}

//Method that tests the printing method of the array class.
void ArrayTester::testPrint() {
	cout << "Testing print()... " << flush;
	setup();
	cout << "\nExpecting 3 values: 1, 2, 3..." << endl;
	print(a1, 3);
	cout << "\nExpecting 4 values: 2, 3, 4, 5..." << endl;
	print(a2, 4);
	cout << "\nExpecting 5 values: 3, 4, 5, 6, 7..." << endl;
	print(a3, 5);
        cleanup();
	cout << "\nPassed!" << endl;
}

//Method that tests the average method of the array class.
void ArrayTester::testAverage() {
	cout << "Testing average()... " << flush;
	setup();
	assert( average(a1, 3) == 2  );
	assert( average(a2, 4) == 3.5 );
	assert( average(a3, 5) == 5 );
        cleanup();
	cout << "Passed!" << endl;
}

//Method that tests the sum method of the array class.
void ArrayTester::testSum() {
	cout << "Testing sum()... " << flush;
	setup();
	assert( sum(a1, 3) == 6 );
	assert( sum(a2, 4) == 14 );
	assert( sum(a3, 5) == 25 );
        cleanup();
	cout << "Passed!" << endl;
}

//Method that tests the resize method of the array class.
void ArrayTester::testResize() {
	cout << "Testing resize()... " << flush;
	setup();
	double * temp1 = a1;
	resize(a1, 3, 7);
	assert( a1 != temp1 );
	for (int i = 0; i < 3; i++) {
		assert( a1[i] == i+1 );
	}
	for (int i = 3; i < 7; i++) {
		assert( a1[i] == 0 );
	}

	double *temp3 = a3;
	resize(a3, 5, 3);
	assert( temp3 != a3 );
	for (int i = 0; i < 3; i++) {
		assert( a3[i] == i+3 );
	}
        cleanup();
	cout << "Passed!  But double-check that you deleted the old array..." << endl;
}

//Method that tests the concat method of the array class.
void ArrayTester::testConcat() {
	cout << "Testing concat()... " << flush;
	setup();
	int size1 = 3, size2 = 4, size3 = 5;
	double *temp1 = a1;
	double *temp2 = a2;
	double *temp3 = a3;
	concat(a1, size1, a2, size2, a3, size3);
	assert( temp1 == a1 );
	assert( temp2 == a2 );
        /* the next assertion assumes that the new array's base
         *  address is different from the old array's base address,
         *  which may not be true. If concat() seems to be right,
         *  and passes all assertions except this one, you may
         *  comment out this assertion.
         */
	assert( temp3 != a3 );
	assert( size1 == 3 );
	assert( size2 == 4 );
	assert( size3 == 7 );
	for (int i = 0; i < 3; i++) {
		assert( a3[i] == i+1 );
	}
	int j = 2;
	for (int i = 3; i < 7; i++) {
		assert( a3[i] == j );
		j++;
	}
        cleanup();
	cout << "Passed!  But double-check that you deleted the old array..." << endl;
}

//Method that tests the fill method of the array class.
void ArrayTester::testFill() {
	cout << "Testing fill()... " << flush;
	setup();
	int size1 = 3;
	double *temp1 = a1;
	fill("arrayData.txt", a1, size1);
	assert( a1 != temp1 );
	assert( size1 == 6);
	for (int i = 0; i < size1; i++) {
		assert( a1[i] == i+10 );   // values should be 10, 11, 12, 13, 14, 15
	}
        cleanup();
	cout << "Passed!  But double-check that you deleted the old array..." << endl;
}

//Method that tests the read method of the array class.
void ArrayTester::testRead() {
	cout << "Testing read()... " << flush;
	double* a4 = new double[6];
	ifstream fin("arrayData.txt");
	assert( fin.is_open() );
	string firstLine, secondLine;
	getline(fin, firstLine);         // skip past the '6' that's there for fill()...
	getline(fin, secondLine);        // skip past the '10'
	read(fin, a4, 5);                // read 5 values instead of 6
	for (int i = 0; i < 5; i++) {    // check what we got:
		assert( a4[i] == i+11 ); 	 //  values should be 11, 12, 13, 14, 15,
	}                                //   	so test-values differ from fill()
        delete [] a4;
	cout << "Passed!" << endl;
}
]0;elc3@cray: ~/workspace/cs112/project2elc3@cray:~/workspace/cs112/project2$ ArrayTester.h
ArrayTester.h: command not found
]0;elc3@cray: ~/workspace/cs112/project2elc3@cray:~/workspace/cs112/project2$ cat Arrray[K[K[KayTester.h
/*ArrayTester.h provides a class to test C-style array operations.
 * Student: Ethan Clark
 * Date: February 22, 2015
 * By: Joel Adams, for CS 112 at Calvin College.
 */

#ifndef ARRAY_TESTER_H_
#define ARRAY_TESTER_H_

//Includes for the ArrayTester class.
#include "array.h"  // the functions we are testing
#include <iostream>
#include <cassert>
using namespace std;

//Declaring the private and public methods of the ArrayTester class.
class ArrayTester
{
public:
	ArrayTester();
	virtual ~ArrayTester();
	void runTests();
	void setup();
	void cleanup();
	void testInitialize();
	void testPrint();
	void testAverage();
	void testSum();
	void testResize();
	void testConcat();
	void testFill();
	void testRead();
private:
	double * a1;
	double * a2;
	double * a3;
};

#endif /*ARRAY_TESTER_H_*/
]0;elc3@cray: ~/workspace/cs112/project2elc3@cray:~/workspace/cs112/project2$ cat main.cpp
/* main.cpp drives the testing of the array operations.
 * Student: Ethan Clark
 * Date: February 22, 2015
 * Begun by: Joel Adams, for CS 112 at Calvin College.
 */

//Include the ArrayTester class to test the Array class.
#include "ArrayTester.h"

//Main function for the project 2 C++ project.
int main() {
	ArrayTester at;
	at.runTests();
}
]0;elc3@cray: ~/workspace/cs112/project2elc3@cray:~/workspace/cs112/project2$ cat arrayData.txt
6
10
11
12
13
14
15
]0;elc3@cray: ~/workspace/cs112/project2elc3@cray:~/workspace/cs112/project2$ ls]
No command 'ls]' found, did you mean:
 Command 'lsh' from package 'lsh-client' (universe)
 Command 'lsw' from package 'suckless-tools' (universe)
 Command 'lst' from package 'lustre-utils' (universe)
 Command 'ls' from package 'coreutils' (main)
ls]: command not found
]0;elc3@cray: ~/workspace/cs112/project2elc3@cray:~/workspace/cs112/project2$ ls
array.cpp      array.h          ArrayTester.h  main.cpp
arrayData.txt  ArrayTester.cpp  [0m[01;34mDebug[0m          typescript
]0;elc3@cray: ~/workspace/cs112/project2elc3@cray:~/workspace/cs112/project2$ cd Debug
]0;elc3@cray: ~/workspace/cs112/project2/Debugelc3@cray:~/workspace/cs112/project2/Debug$ ls
array.d  ArrayTester.d  main.d  makefile    [0m[01;32mproject2[0m    subdir.mk
array.o  ArrayTester.o  main.o  objects.mk  sources.mk
]0;elc3@cray: ~/workspace/cs112/project2/Debugelc3@cray:~/workspace/cs112/project2/Debug$ make all
make: Nothing to be done for `all'.
]0;elc3@cray: ~/workspace/cs112/project2/Debugelc3@cray:~/workspace/cs112/project2/Debug$ cd ..
]0;elc3@cray: ~/workspace/cs112/project2elc3@cray:~/workspace/cs112/project2$ ls
array.cpp      array.h          ArrayTester.h  main.cpp
arrayData.txt  ArrayTester.cpp  [0m[01;34mDebug[0m          typescript
]0;elc3@cray: ~/workspace/cs112/project2elc3@cray:~/workspace/cs112/project2$ ./Debug/project2
Testing initialize()... Passed!
Testing print()... 
Expecting 3 values: 1, 2, 3...
1	2	3	
Expecting 4 values: 2, 3, 4, 5...
2	3	4	5	
Expecting 5 values: 3, 4, 5, 6, 7...
3	4	5	6	7	
Passed!
Testing average()... Passed!
Testing sum()... Passed!
Testing resize()... Passed!  But double-check that you deleted the old array...
Testing concat()... Passed!  But double-check that you deleted the old array...
Testing fill()... Passed!  But double-check that you deleted the old array...
Testing read()... Passed!
All tests passed!
]0;elc3@cray: ~/workspace/cs112/project2elc3@cray:~/workspace/cs112/project2$ exit

Script done on Mon 23 Feb 2015 08:18:26 PM EST
