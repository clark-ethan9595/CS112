Script started on Mon 02 Mar 2015 08:56:34 PM EST
]0;elc3@zuse: ~/workspace/cs112/project3elc3@zuse:~/workspace/cs112/project3$ ls
[0m[01;34mDebug[0m       Vec.cpp           vecTest1Copy.txt  vecTest2.txt
tester.cpp  Vec.h             vecTest1.txt      VecTester.cpp
typescript  vecStreamOut.txt  vecTest2Copy.txt  VecTester.h
]0;elc3@zuse: ~/workspace/cs112/project3elc3@zuse:~/workspace/cs112/project3$ cat tester.cpp
/* tester.cpp drives the testing of our Vec class.
 * Student Names: Ethan Clark (Student One) and Thomas Dykstra (Student Two)
 * Date: March 2, 2015
 * Begun by: Joel C. Adams, for CS 112 at Calvin College.
 */

//Include the VecTester class to run the Vec tests
#include "VecTester.h"

//Function to print out the Vecs in nice and clean fashion
void vecPrint(const Vec& v1, const int& num_dimensions){
	cout << "{";
	for (int i = 0; i < num_dimensions-1; i++) {
		cout << v1[i] << ",";
	}
	cout << v1[num_dimensions-1] << "}" << endl;
}

//Function to run the Vec Application program
void vecApplication() {

	//Forever Loop to run the application until the user quits
	while (true) {

		//Output and input to see if the user ends the application
		cout << "Enter 'C' to continue the application or 'Q' to quit: ";
		string user_entry;
		cin >> user_entry;

		//Break the forever loop if the user quits
		if (user_entry == "Q" or user_entry == "q") {
			break;
		}

		//Ask the user how many dimensions they would like to work with
		cout << "How many dimensions would you like to use? ";
		int num_dimensions;
		cin >> num_dimensions;

		//Create a starting Vec and assign starting values based off the user's choices
		Vec starting_vec(num_dimensions);

		cout << "Please enter " << num_dimensions << " values for the starting location: " << endl;

		for (int i = 0; i < num_dimensions; i++) {

			cout << "Value " << i+1 << ": ";

			int number;
			cin >> number;
			starting_vec[i] = number;
		}

		//Call to print out the starting Vec the user created
		cout << "The starting Vec is ";
		vecPrint(starting_vec, num_dimensions);

		//Ask the user how many Vecs they would like to create
		cout << "Please enter the number of Vecs you would like to create: ";
		int num_vecs;
		cin >> num_vecs;

		//Create a copy of the starting vec to use as the ending vec
		Vec ending_vec(num_dimensions);
		ending_vec = starting_vec;

		//Loop through and add the vecs entered by the user to the ending vec
		for (int i = 0; i < num_vecs; i++) {

			Vec adding_vec(num_dimensions);
			cout << "Vec" << i+1 << endl;

			for (int i = 0; i < num_dimensions; i++) {

				cout << "Value " << i+1 << ": ";

				int number;
				cin >> number;
				adding_vec[i] = number;
			}
			ending_vec = ending_vec + adding_vec;
			cout << endl;
		}

		//Print out the ending vec
		cout << "The starting Vec is ";
		vecPrint(starting_vec, num_dimensions);
		cout << "The ending Vec is ";
		vecPrint(ending_vec, num_dimensions);
	}
}

//Main function to run the testing program or the Vec application
int main() {
	cout << "Would you like to run the Vec tests or run the Vec application?" << endl;
	cout << "Type 0 for tests or 1 for the application: ";

	int user_entry;
	cin >> user_entry;

	//If user enters 0, run the Vec tests
	if (user_entry == 0) {

		VecTester vt;
		vt.runTests();
	}

	//If user enters 1, run the Vec application
	if (user_entry == 1) {
		vecApplication();
	}
}
]0;elc3@zuse: ~/workspace/cs112/project3elc3@zuse:~/workspace/cs112/project3$ cat Vec.co[Kpp
/* Vec.cpp defines the methods for Vec, a simple vector class.
 * Student Names: Ethan Clark (Student One) and Thomas Dykstra (Student Two)
 * Date: March 2, 2015
 * Begun by: Joel C. Adams, for CS 112 at Calvin College.
 */

//Include the header file for this class
#include "Vec.h"

//Default Constructor for the Vec class
Vec::Vec() {
	mySize = 0;
	myArray = NULL;
}

//Explicit Constructor for the Vec class
Vec::Vec(unsigned size) {
	mySize = size;
	myArray = new Item[size]();
}

//Copy constructor for the Vec class
Vec::Vec(const Vec& original) {
	mySize = original.mySize;
	if ( original.mySize > 0 ) {
		myArray = new Item[mySize];
		for (unsigned i = 0; i < mySize; i++) {
			myArray[i] = original.myArray[i];
		}
	}
	else {
		myArray = NULL;
	}
}

//Destructor to deallocate the memory for myArray for the Vec class
Vec::~Vec() {
	delete [] myArray;
	myArray = NULL;
	mySize = 0;
}

//Assignment Operator for the Vec class
Vec& Vec::operator=(const Vec& original) {
	if (this != &original) {
		if (mySize != original.mySize) {
			if (mySize > 0) {
				delete [] myArray;
				myArray = NULL;
			}
			if (original.mySize > 0) {
				myArray = new Item[original.mySize];
			}
			mySize = original.mySize;
		}
		for (unsigned i = 0; i < mySize; i++) {
			myArray[i] = original.myArray[i];
		}
	}
	return *this;
}

//Vec class method that returns the size of the Vec
unsigned Vec::getSize() const {
	return mySize;
}

//Vec class method that sets a certain index to a value
void Vec::setItem(unsigned index, const Item& it) {
	if ( index >= mySize ) {
		throw range_error("Invalid index");
	}
	else {
		myArray[index] = it;
	}
}

//Vec class method that returns the value at a certain index
Item Vec::getItem(unsigned index) const {
	if ( index >= mySize ) {
		throw range_error("Invalid index");
	}
	else {
		return myArray[index];
	}
}

//Vec class method that sets the size of the Vec
void Vec::setSize(unsigned newSize) {
	if (mySize != newSize) {
		if (newSize == 0) {
			delete [] myArray;
			myArray = NULL;
			mySize = 0;
		}
		else {
			Item *newArray = new Item[newSize];
			if (mySize < newSize) {
				for (unsigned i = 0; i < mySize; i++) {
					newArray[i] = myArray[i];
				}
				for (unsigned i = mySize; i < newSize; i++) {
					newArray[i] = 0;
				}
			}
			else {
				for (unsigned i = 0; i < newSize; i++) {
					newArray[i] = myArray[i];
				}
			}
			mySize = newSize;
			delete [] myArray;
			myArray = newArray;
		}
	}
}

//Vec class method that compares two Vecs and returns true if they are the same
//and returns false if they are not the same
bool Vec::operator==(const Vec& v2) {
	if (mySize != v2.getSize()) {
		return false;
	}
	for (unsigned i = 0; i < mySize; i++) {
		if (myArray[i] != v2.myArray[i]) {
			return false;
		}
	}
	return true;
}

//Vec class method to write the Vecs elements to a file
void Vec::writeTo(ostream& out) const {
	for (unsigned i = 0; i < mySize; i++) {
		out << myArray[i] << " ";
	}
}

//Vec class method that reads in elements from a file and puts them in a Vec
void Vec::readFrom(istream& in) {
	for (unsigned i = 0; i < mySize; i++) {
		in >> myArray[i];
	}
}

/*
 * Ethan Clark (student one) wrote the next three methods
 * Vec class method that compares two vecs, returning true if they are not equal
 * and returning false if they are equal
 */
bool Vec::operator!=(const Vec& v2) {
	if (mySize != v2.getSize()) {
		return true;
	}
	if (mySize == v2.getSize()) {
		for (unsigned i = 0; i < mySize; i++) {
			if (myArray[i] != v2.myArray[i]) {
				return true;
			}
		}
	}
	return false;
}

//Vec class method that takes two vecs and subtracts one from the other
Vec Vec::operator-(const Vec& v1) {
	if ( mySize == v1.getSize() ) {
		Vec v3(mySize);
		for ( unsigned i =0; i < mySize; i++ ) {
			v3.myArray[i] = ( myArray[i] - v1.myArray[i] );
		}
		return v3;
	}
	else {
		throw invalid_argument("Different sized vecs");
	}
}

//Vec class method that reads in values from a file and puts them in a Vec
void Vec::readFrom(const string& filename) {
	ifstream fin( filename.c_str() );
	assert ( fin.is_open() );

	fin >> mySize;

	delete [] myArray;

	myArray = new Item[mySize];

	for ( unsigned i = 0; i < mySize; i++ ) {
		fin >> myArray[i];
	}

	fin.close();
}
//end Student One methods

/*
 * Thomas Dykstra (Student Two) wrote the next three methods
 * Vec class method that writes a Vec's elements to a file
 */
void Vec::writeTo(string fileName){
	ofstream out ( fileName.c_str() );
	assert (out.is_open());
	out << mySize << endl;
	for (unsigned i = 0; i<mySize; i++){
		out << myArray[i] << endl;
	}
}

//Vec class method that adds two vecs together
Vec Vec::operator+(const Vec& v2) {
	//operator= takes care of possible memory leak of v3
	if ( mySize == v2.getSize() ) {
		Vec v3(mySize);
		for (unsigned i = 0; i < mySize; i++){
			v3.myArray[i] = (myArray[i] + v2.myArray[i]);
		}
	return v3;
	}
	else {
		throw invalid_argument("One Size is Too Big");
}
}

//Vec class method that returns the dot product of two vecs
double Vec::operator*(const Vec& v2) {
	double dProd = 0;
	if ( mySize == v2.getSize() ){
		for (unsigned i=0; i<mySize; i++){
			dProd += (myArray[i] * v2.myArray[i]);
		}
		return dProd;
	}
	else {
		throw invalid_argument("Different sized Vecs");
	}
}
//end Student Two methods.

//Student One Method (Ethan Clark)
//Vec class method that returns the value at a given index using the subscript operator
const Item& Vec::operator[](unsigned index) const {

	if ( index >= mySize ) {
		throw range_error("Invalid index");
	}

	return myArray[index];
}

//Student Two Method (Thomas Dykstra)
//Vec class method that assigns the value to the given index using the subscript operator
Item& Vec::operator[](unsigned index) {

	if ( index >= mySize ) {
		throw range_error("Invalid index");
	}
	return myArray[index];
}
]0;elc3@zuse: ~/workspace/cs112/project3elc3@zuse:~/workspace/cs112/project3$ cat Vec.h
/* Vec.h provides a simple vector class named Vec.
 * Student Names: Ethan Clark (Student One) and Thomas Dykstra (Student Two)
 * Date: March 2, 2015
 * Begun by: Joel C. Adams, for CS 112 at Calvin College.
 */

#ifndef VEC_H_
#define VEC_H_

//Includes for the Vec Class
#include <iostream>
#include <stdexcept>
#include <cassert>
#include <fstream>
using namespace std;

typedef double Item;

//Declaration of the Vec Class and its methods, both private and public
class Vec {
public:
	Vec();
	Vec(unsigned size);
	Vec(const Vec& original);
	virtual ~Vec();
	Vec& operator=(const Vec& original);
	unsigned getSize() const;
	void setItem(unsigned index, const Item& it);
	Item getItem(unsigned index) const;
	void setSize(unsigned newSize);
	bool operator==(const Vec& v2);
	void writeTo(ostream& out) const;
	void readFrom(istream& in);
	bool operator!=(const Vec& v2);
	Vec operator-(const Vec& v1);
	void readFrom(const string& filename);
	const Item& operator[](unsigned index) const;
	Item& operator[](unsigned index);
	void writeTo(string fileName);
	Vec operator+(const Vec& v2);
	double operator*(const Vec& v2);
private:
	unsigned mySize;
	Item * myArray;
	friend class VecTester;

};

#endif /*VEC_H_*/
]0;elc3@zuse: ~/workspace/cs112/project3elc3@zuse:~/workspace/cs112/project3$ cat VecTester.cpp
/* VecTester.cpp defines the unit test-methods for Vec, a simple vector class.
 * Student Names: Ethan Clark (Student One) and Thomas Dykstra (Student Two)
 * Date: March 2, 2015
 * Begun by: Joel C. Adams, for CS 112 at Calvin College.
 */

//Includes needed for the VecTester Class
#include "VecTester.h"
#include <iostream>     // cout, cerr, ...
#include <fstream>      // ifstream, ofstream, ...
#include <cassert>      // assert()
#include <cstdlib>      // exit()
#include <stdexcept>    // range_error, ...
using namespace std;

//Main function that runs all the tests for the Vec Class
void VecTester::runTests() const {
	cout << "Testing class Vec" << endl;
	testDefaultConstructor();
	testExplicitConstructor();
	testCopyConstructor();
	testDestructor();
	testAssignment();
	testGetSize();
	testSetItem();
	testGetItem();
	testSetSize();
	testEquality();
	testWriteToStream();
	testReadFromStream();
	testInequality();
	testAddition();
	testSubtraction();
	testDotProduct();
	testReadFromFile();
	testWriteToFile();
	SubscriptTester();
	cout << "All tests passed!" << endl;
}

//Test the Default Constructor for the Vec Class
void VecTester::testDefaultConstructor() const {
	cout << "Testing default constructor... " << flush;
	Vec v;
	assert( v.mySize == 0 );
	assert( v.myArray == NULL );
	cout << "Passed!" << endl;
}

//Test the Explicit Constructor for the Vec Class
void VecTester::testExplicitConstructor() const {
	cout << "Testing explicit constructor... " << flush;
	cout << " 1 " << flush;
	Vec v1(3);
	assert( v1.mySize == 3 );
	assert( v1.myArray != NULL );
	for (int i = 0; i < 3; i++) {
		assert( v1.myArray[i] == 0 );
	}
	cout << " 2 " << flush;
	Vec v2(8);
	assert( v2.mySize == 8 );
	assert( v2.myArray != NULL );
	for (int i = 0; i < 8; i++) {
		assert( v2.myArray[i] == 0 );
	}
	cout << "Passed!" << endl;
}

//Test the Copy Constructor for the Vec Class
void VecTester::testCopyConstructor() const {
	cout << "Testing copy constructor..." << flush;
	cout << " 1 " << flush;
	Vec v1;
	Vec v2(v1);
	assert( v2.mySize == 0 );
	assert( v2.myArray == NULL);

	cout << " 2 " << flush;
	Vec v3(5);
	Vec v4(v3);
	assert(v4.mySize == 5);
	assert(v4.myArray != NULL);
	assert(v4.myArray != v3.myArray);
	for (unsigned i = 0; i < 5; i++) {
		assert( v4.myArray[i] == 0 );
	}

	cout << " 3 " << flush;
	Vec v5(5);
	for (unsigned i = 0; i < 5; i++) {
		v5.myArray[i] = (i+1);
	}
	Vec v6(v5);
	assert( v6.mySize == 5 );
	assert( v6.myArray != NULL );
	assert( v6.myArray != v5.myArray );
	for (unsigned i = 0; i < 5; i++) {
		assert( v6.myArray[i] == v5.myArray[i] );
	}
	cout << "Passed!" << endl;
}

//Test the destructor for the Vec Class
void VecTester::testDestructor() const {
	cout << "Testing destructor... " << flush;
	Vec v(5);
	v.~Vec();
	assert( v.mySize == 0 );
	assert( v.myArray == NULL );
	cout << "Passed, but make sure ~Vec() is returning the array's memory to the system!" << endl;
}

//Test the assignment operator for the Vec Class
void VecTester::testAssignment() const {
	cout << "Testing =..." << flush;
	// empty-to-empty
	Vec v, v0;
	v = v0;
	assert(v.mySize == 0);
	assert(v.myArray == NULL);
	cout << " 0 " << flush;
	// empty-to-nonempty
	Vec v1;
	Vec v2(5);
	v2 = v1;
	assert(v2.mySize == 0);
	assert(v2.myArray == NULL);
	cout << " 1 " << flush;
	// nonempty-to-empty
	Vec v3(5);
	for (unsigned i = 0; i < 5; i++) {
		v3.myArray[i] = (i+1);
	}
	Vec v4;
	v4 = v3;
	assert( v4.mySize == 5 );
	assert( v4.myArray != v3.myArray );
	for (unsigned i = 0; i < 5; i++) {
		assert( v4.myArray[i] == (i+1) );
	}
	cout << " 2 " << flush;
	// nonempty-to-nonempty (larger into smaller)
	Vec v5(2);
	for (unsigned i = 0; i < 2; i++) {
		v5.myArray[i] = (i+1)*10;
	}
	v5 = v3;
	assert(v5.mySize == 5);
	assert(v5.myArray != v3.myArray);
	for (unsigned i = 0; i < 5; i++) {
		assert( v5.myArray[i] == (i+1) );
	}
	cout << " 3 " << flush;
	// nonempty-to-nonempty (smaller into larger)
	Vec v6(7);
	for (unsigned i = 0; i < 7; i++) {
		v6.myArray[i] = (i+1)*10;
	}
	v6 = v3;
	assert(v6.mySize == 5);
	assert(v6.myArray != v3.myArray);
	for (unsigned i = 0; i < 5; i++) {
		assert( v6.myArray[i] == (i+1) );
	}
	cout << " 4 " << flush;
	// nonempty-to-nonempty (equal sized)
	Vec v7(5);
	for (unsigned i = 0; i < 5; i++) {
		v7.myArray[i] = (i+1)*10;
	}
	v7 = v3;
	assert(v7.mySize == 5);
	assert(v7.myArray != v3.myArray);
	for (unsigned i = 0; i < 5; i++) {
		assert( v7.myArray[i] == (i+1) );
	}
	cout << " 5 " << flush;
	// assignment chaining
	Vec v8;
	Vec v9(4);
	v9 = v8 = v3;
	assert( v9.mySize == 5 );
	assert( v9.mySize == 5 );
	assert( v8.myArray != v3.myArray );
	assert( v8.myArray != v3.myArray );
	assert( v9.myArray != v8.myArray );
	for (unsigned i = 0; i < 5; i++) {
		assert( v8.myArray[i] == (i+1) );
		assert( v9.myArray[i] == (i+1) );
	}
	cout << " 6 " << flush;
	// self-assignment (idiotic but legal)
	v3 = v3;
	assert( v3.mySize == 5 );
	assert( v3.myArray != NULL );
	for (unsigned i = 0; i < 5; i++) {
		assert(v3.myArray[i] == (i+1) );
	}
	cout << " 7 " << flush;
	cout << "Passed!" << endl;
}

//Test the GetSize method for the Vec Class
void VecTester::testGetSize() const {
	cout << "Testing getSize()..." << flush;
	Vec v1;
	assert( v1.getSize() == 0 );
	cout << " 1 " << flush;
	Vec v2(5);
	assert( v2.getSize() == 5 );
	cout << " 2 " << flush;
	cout << "Passed!" << endl;
}

//Test the SetItem method for the Vec Class
void VecTester::testSetItem() const {
	cout << "Testing setItem()... " << flush;
	// empty case
	Vec v0;
	try {
		v0.setItem(0, 11);
		cerr << "setItem() succeeded on empty Vec";
		exit(1);
	} catch (range_error&) {
		cout << " 0 " << flush;
	}
	// nonempty case, valid subscript
	Vec v(5);
	for (unsigned i = 0; i < 5; i++) {
		v.setItem(i, i+1);
	}
	for (unsigned i = 0; i < 5; i++) {
		assert( v.myArray[i] == (i+1) );
	}
	cout << " 1 " << flush;
	// nonempty case, invalid subscript
	Vec v2(3);
	try {
		v2.setItem(3, 33);
		cerr << "setItem() succeeded beyond end of Vec";
		exit(1);
	} catch (range_error&) {
		cout << " 2 " << flush;
	}
	cout << "Passed!" << endl;
}

//Test the GetItem method for the Vec Class
void VecTester::testGetItem() const {
	cout << "Testing getItem()... " << flush;
	// empty Vec
	Vec v0;
	try {
		v0.getItem(0);
		cerr << "getItem() succeeded on empty Vec";
		exit(1);
	} catch (range_error&) {
		cout << " 0 " << flush;
	}
	// non-empty, valid access
	Vec v(5);
	for (unsigned i = 0; i < 5; i++) {
		v.setItem(i, i+1);
	}
	for (unsigned i = 0; i < 5; i++) {
		assert( v.getItem(i) == (i+1) );
	}
	cout << " 1 " << flush;
	// nonempty Vec, invalid index
	Vec v2(3);
	try {
		v2.getItem(3);
		cerr << "getItem() succeeded beyond end of Vec";
		exit(1);
	} catch (range_error&) {
		cout << " 2 " << flush;
	}
	cout << "Passed!" << endl;
}

//Test the SetSize method for the Vec Class
void VecTester::testSetSize() const {
	cout << "Testing setSize()..." << flush;
	// empty
	Vec v0;
	v0.setSize(3);
	assert( v0.getSize() == 3 );
	for (unsigned i = 0; i < 3; i++) {
		assert( v0.getItem(i) == 0 );
	}
	cout << " 0 " << flush;

	// non-empty, increasing
	Vec v1(5);
	for (unsigned i = 0; i < 5; i++) {
		v1.setItem(i, i+1);
	}
	Item * saveAddress = v1.myArray;
	v1.setSize(8);
	assert( v1.getSize() == 8 );
	for (unsigned i = 0; i < 5; i++) {
		assert( v1.getItem(i) == (i+1) );
	}
	for (unsigned i = 5; i < 8; i++) {
		assert( v1.getItem(i) == 0 );
	}
	assert( v1.myArray != saveAddress );
	cout << " 1 " << flush;

	// non-empty, decreasing
	Vec v2(5);
	for (unsigned i = 0; i < 5; i++) {
		v2.setItem(i, i+1);
	}
	saveAddress = v2.myArray;
	v2.setSize(3);
	assert( v2.getSize() == 3 );
	for (unsigned i = 0; i < 3; i++) {
		assert( v2.getItem(i) == (i+1) );
	}
	assert( v2.myArray != saveAddress );
	cout << " 2 " << flush;

	// non-empty, same-size
	Vec v3(5);
	for (unsigned i = 0; i < 5; i++) {
		v3.setItem(i, i+1);
	}
	saveAddress = v3.myArray;
	v3.setSize(5);
	assert( v3.getSize() == 5 );
	for (unsigned i = 0; i < 5; i++) {
		assert( v3.getItem(i) == (i+1) );
	}
	assert( v3.myArray == saveAddress );
	cout << " 3 " << flush;
	// set size to zero
	v3.setSize(0);
	assert( v3.getSize() == 0 );
	assert( v3.myArray == NULL );
	cout << " 4 " << flush;
	cout << "Passed!" << endl;
}

//Test the equality method for the Vec Class
void VecTester::testEquality() const {
	cout << "Testing ==..." << flush;
	// empty case
	Vec v1;
	Vec v2;
	assert( v1 == v2 );
	cout << " 1 " << flush;

	// nonempty, same size, default values
	Vec v3(5);
	Vec v4(5);
	assert( v3 == v4 );
	cout << " 2 " << flush;

	// nonempty, same size, set values
	Vec v5(5);
	Vec v6(5);
	for (unsigned i = 0; i < 5; i++) {
		v5.setItem(i, i+1);
		v6.setItem(i, i+1);
	}
	assert( v5 == v6 );
	cout << " 3 " << flush;

	// empty vs nonempty
	Vec v7;
	Vec v8(5);
	assert( !(v7 == v8) );
	cout << " 4 " << flush;

	// nonempty, same size, first value different
	Vec v9(5);
	Vec v10(5);
	Vec v11(5);
	Vec v12(5);
	v10.setItem(0, 1);
	assert( !(v9 == v10) );
	cout << " 5 " << flush;

	// nonempty, same size, middle value different
	v11.setItem(2, 1);
	assert( !(v9 == v11) );
	cout << " 6 " << flush;

	// nonempty, same size, last value different
	v12.setItem(4, 1);
	assert( !(v9 == v12) );
	cout << " 7 " << flush;

	cout << "Passed!" << endl;
}

//Test the WriteToStream method for the Vec Class
void VecTester::testWriteToStream() const {
	cout << "Testing writeTo(ostream)... " << flush;
	Vec v1(5);
	for (unsigned i = 0; i < 5; i++) {
		v1.setItem(i, i+10);
	}
	// write to an ofstream instead of cout, to automate the test
	ofstream fout("vecStreamOut.txt");
	assert( fout.is_open() );
	fout << v1.getSize() << "\n";
	v1.writeTo(fout);
	fout.close();
	// now read in what we just wrote...
	ifstream fin("vecStreamOut.txt");
	assert( fin.is_open() );
	unsigned size;
	fin >> size;
	assert( size == 5 );
	double value;
	for (unsigned i = 0; i < 5; i++) {
		fin >> value;
		assert( value == i+10 );
	}
	cout << "Passed! See 'vecStreamOut.txt' for values..." <<
			endl;
}

//Test the ReadFromStream method for the Vec Class
void VecTester::testReadFromStream() const {
	cout << "Testing readFrom(istream)... " << flush;
	// an ifstream is-an istream, so use one to automate the test
	ifstream fin("vecStreamOut.txt");
	assert( fin.is_open() );
	// get the size and build the Vec
	unsigned size;
	fin >> size;
	assert( size == 5 );
	Vec v(size);
	// test readFrom()
	v.readFrom(fin);
	for (unsigned i = 0; i < 5; i++) {
		assert( v.getItem(i)== i+10 );
	}
	fin.close();
	cout << "Passed!" << endl;
}

//Test the inequality method for the Vec Class
void VecTester::testInequality() const {
	cout << "Testing !=... " << flush;
	// empty
	Vec v0;
	Vec v1;
	assert( !(v0 != v1) );
	cout << " 0 " << flush;
	// empty vs nonempty
	Vec v2(3);
	assert( v1 != v2 );
	cout << " 1 " << flush;
	// equal sized, same values
	Vec v3(3);
	Vec v4(3);
	assert( !(v3 != v4) );
	cout << " 2 " << flush;
	// equal sized, different values
	for (unsigned i = 0; i < 3; i++) {
		v4.myArray[i] = i+1;
	}
	assert( v3 != v4 );
	cout << " 3 " << flush;

	cout << "Passed!" << endl;
}

//Test the addition method for the Vec Class
void VecTester::testAddition() const {
	cout << "Testing +... " << flush;
	// nonempty
	Vec v1(3);
	Vec v2(3);
	v1.setItem(0, 1);
	v1.setItem(1, 2);
	v1.setItem(2, 3);
	v2.setItem(0, 2);
	v2.setItem(1, 4);
	v2.setItem(2, 6);
	Vec saveV1 = v1;    // for test 2 below
	Vec v3 = v1 + v2;
	assert( v3.getItem(0) == 3 );
	assert( v3.getItem(1) == 6 );
	assert( v3.getItem(2) == 9 );
	cout << " 1 " << flush;
	// addition should not change the left operand
	assert( v1.getItem(0) == saveV1.getItem(0) );
	assert( v1.getItem(1) == saveV1.getItem(1) );
	assert( v1.getItem(2) == saveV1.getItem(2) );
	cout << " 2 " << flush;
	// empty
	Vec v4, v5;
	v3 = v4 + v5;
	assert( v3.getSize() == 0 );
	assert( v3.myArray == NULL );
	cout << " 3 " << flush;
	// different sizes
	try {
		v3 = v2 + v4;
		cerr << "v2 + v4 succeeded for Vecs of different sizes";
		exit(1);
	} catch (invalid_argument&) {
		cout << " 4 " << flush;
	}
	cout << "Passed!" << endl;
}

//Test the subtraction method for the Vec Class
void VecTester::testSubtraction() const {
	cout << "Testing -... " << flush;
	// nonempty
	Vec v1(3);
	Vec v2(3);
	v1.setItem(0, 1);
	v1.setItem(1, 2);
	v1.setItem(2, 3);
	v2.setItem(0, 2);
	v2.setItem(1, 4);
	v2.setItem(2, 6);
	Vec saveV1 = v1;  // for test 2 below
	Vec v3 = v1 - v2;
	assert( v3.getItem(0) == -1 );
	assert( v3.getItem(1) == -2 );
	assert( v3.getItem(2) == -3 );
	cout << " 1 " << flush;
	// subtraction should not change the left operand
	assert( v1.getItem(0) == saveV1.getItem(0) );
	assert( v1.getItem(1) == saveV1.getItem(1) );
	assert( v1.getItem(2) == saveV1.getItem(2) );
	cout << " 2 " << flush;
	// empty
	Vec v4, v5;
	v3 = v4 - v5;
	assert( v3.getSize() == 0 );
	assert( v3.myArray == NULL );
	cout << " 3 " << flush;
	// different sizes
	try {
		v3 = v2 - v4;
		cerr << "v2 - v4 succeeded for Vecs of different sizes";
		exit(1);
	} catch (invalid_argument&) {
		cout << " 4 " << flush;
	}
	cout << "Passed!" << endl;
}

//Test the dot product method for the Vec Class
void VecTester::testDotProduct() const {
	cout << "Testing *... " << flush;
	Vec v1(3);
	Vec v2(3);
	v1.setItem(0, 1);
	v1.setItem(1, 2);
	v1.setItem(2, 3);
	v2.setItem(0, 2);
	v2.setItem(1, 4);
	v2.setItem(2, 6);
	Vec saveV1 = v1;  // for test 2 below
	double product = v1 * v2;
	assert( product == 28 );
	cout << " 1 " << flush;
	// dot product should not change the left operand
	assert( v1.getItem(0) == saveV1.getItem(0) );
	assert( v1.getItem(1) == saveV1.getItem(1) );
	assert( v1.getItem(2) == saveV1.getItem(2) );
	cout << " 2 " << flush;
	// empty
	Vec v4, v5;
	product = v4 * v5;
	assert( product == 0 );
	cout << " 3 " << flush;
	// different sizes
	try {
		product = v2 * v4;
		cerr << "v2 * v4 succeeded for Vecs of different sizes";
		exit(1);
	} catch (invalid_argument&) {
		cout << " 4 " << flush;
	}
	cout << "Passed!" << endl;
}

//Test the ReadFromFile method for the Vec Class
void VecTester::testReadFromFile() const {
	cout << "Testing readFrom()... " << flush;
	Vec v1;
	v1.readFrom("vecTest1.txt");
	assert( v1.getSize() == 3 );
	assert( v1.myArray != NULL );
	assert( v1.getItem(0) == 1 );
	assert( v1.getItem(1) == 2 );
	assert( v1.getItem(2) == 3 );
	cout << " 1 " << flush;

	Vec v2(5);
	Item* oldAddr = v2.myArray;
	v2.readFrom("vecTest2.txt");
	assert( v2.getSize() == 4 );
	cout << " 2 " << flush;
	assert( v2.myArray != NULL );
	assert( v2.getItem(0) == 2 );
	assert( v2.getItem(1) == 4 );
	assert( v2.getItem(2) == 6 );
	assert( v2.getItem(3) == 8 );
	/* the last assertion assumes that the new array's base
	 *  address is different from the old array's base address,
	 *  which may not be true. If your method seems to be right,
	 *  is correctly using delete to deallocate the old array,
	 *  and passes all assertions except this one, you may
	 *  comment out this assertion.
	 */
	//assert( v2.myArray != oldAddr );
	cout << " 3 " << flush;
	cout << "Passed! Make sure you close the file..." << endl;
}

//Test the WriteToFile method for the Vec Class
void VecTester::testWriteToFile() const {
	cout << "Testing writeTo()... " << flush;
	// read a vector we know into an empty Vec...
	Vec v1;
	v1.readFrom("vecTest1.txt");
	// make a copy of it in a different file
	v1.writeTo("vecTest1Copy.txt");
	cout << " 1 " << flush;
	cout << "vecTest1Copy.txt created " << flush;
	// read in the copy, and check it
	Vec v3;
	v3.readFrom("vecTest1Copy.txt");
      assert( v3.getSize() == 3 );
      assert( v3.myArray != NULL );
      assert( v3.getItem(0) == 1 );
      assert( v3.getItem(1) == 2 );
      assert( v3.getItem(2) == 3 );
      cout << " 2 " << flush;

	// read a vector we know into a nonempty Vec...
	Vec v2(5);
	v2.readFrom("vecTest2.txt");
	// make a copy of it in a different file
	v2.writeTo("vecTest2Copy.txt");
	cout << " 3 " << flush;
	cout << "vecTest2Copy.txt created " << flush;
	// read in the copy and check it
	v3.readFrom("vecTest2Copy.txt");
      assert( v3.getSize() == 4 );
      assert( v3.myArray != NULL );
      assert( v3.getItem(0) == 2 );
      assert( v3.getItem(1) == 4 );
      assert( v3.getItem(2) == 6 );
      assert( v3.getItem(3) == 8 );
      cout << " 4 " << flush;
	cout << "Passed!  Make sure you closed the file..." << endl;
}

//Test the two overloaded subscript operators for the Vec class
void VecTester::SubscriptTester() const {

	cout << "Testing [ ]... " << flush;

	// empty Vec
	Vec v0;
	try {
		v0[0];
		cerr << "Subscript Operator succeeded on empty Vec";
		exit(1);
	} catch (range_error&) {
		cout << " 0 " << flush;
	}
	try {
		v0[0] = 11;
		cerr << "Subscript Operator succeeded on empty Vec";
		exit(1);
	} catch (range_error&) {
		cout << " 1 " << flush;
	}

	// non-empty, valid access
	Vec v(5);
	for (unsigned i = 0; i < 5; i++) {
		v.setItem(i, i+1);
	}
	for (unsigned i = 0; i < 5; i++) {
		assert( v[i] == (i+1) );
	}
	cout << " 2 " << flush;

	// nonempty Vec, invalid index
	Vec v2(3);
	try {
		v2[3];
		cerr << "Subscript operator succeeded beyond end of Vec";
		exit(1);
	} catch (range_error&) {
		cout << " 3 " << flush;
	}

	// nonempty case, valid subscript
	Vec v3(5);
	for (unsigned i = 0; i < 5; i++) {
		v3[i] = (i+1);
	}
	for (unsigned i = 0; i < 5; i++) {
		assert( v3.myArray[i] == (i+1) );
	}
	cout << " 4 " << flush;

	// nonempty case, invalid subscript
	Vec v4(3);
	try {
		v4[5] = 33;
		cerr << "Subscript operator succeeded beyond end of Vec";
		exit(1);
	} catch (range_error&) {
		cout << " 5 " << flush;
	}
	cout << "Passed!" << endl;
}
]0;elc3@zuse: ~/workspace/cs112/project3elc3@zuse:~/workspace/cs112/project3$ cat VecTester.h
/* VecTester.h provides unit tests for Vec, a simple vector class.
 * Student Names: Ethan Clark (Student One) and Thomas Dykstra (Student Two)
 * Date: March 2, 2015
 * Begun by: Joel C. Adams, for CS 112 at Calvin College.
 */
 
#ifndef VECTESTER_H_
#define VECTESTER_H_

#include "Vec.h"

//Declaring the VecTester Class with its methods
class VecTester {
public:
	void runTests() const;
	void testDefaultConstructor() const;
	void testExplicitConstructor() const;
	void testDestructor() const;
	void testGetSize() const;
	void testSetItem() const;
	void testGetItem() const;
	void testSetSize() const;
	void testCopyConstructor() const;
	void testAssignment() const;
	void testEquality() const;
	void testWriteToStream() const;
	void testReadFromStream() const;
	void testInequality() const;
	void testAddition() const;
	void testSubtraction() const;
	void testDotProduct() const;
	void testReadFromFile() const;
	void testWriteToFile() const;
	void SubscriptTester() const;
};

#endif /*VECTESTER_H_*/
]0;elc3@zuse: ~/workspace/cs112/project3elc3@zuse:~/workspace/cs112/project3$ cd Debug
]0;elc3@zuse: ~/workspace/cs112/project3/Debugelc3@zuse:~/workspace/cs112/project3/Debug$ ls
makefile    [0m[01;32mproject3[0m    subdir.mk  tester.o  Vec.o        VecTester.o
objects.mk  sources.mk  tester.d   Vec.d     VecTester.d
]0;elc3@zuse: ~/workspace/cs112/project3/Debugelc3@zuse:~/workspace/cs112/project3/Debug$ make all
make: Nothing to be done for `all'.
]0;elc3@zuse: ~/workspace/cs112/project3/Debugelc3@zuse:~/workspace/cs112/project3/Debug$ cd ..
]0;elc3@zuse: ~/workspace/cs112/project3elc3@zuse:~/workspace/cs112/project3$ ./Debug/
bash: ./Debug/: Is a directory
]0;elc3@zuse: ~/workspace/cs112/project3elc3@zuse:~/workspace/cs112/project3$ /[K./Debug/project3
Would you like to run the Vec tests or run the Vec application?
Type 0 for tests or 1 for the application: 0
Testing class Vec
Testing default constructor... Passed!
Testing explicit constructor...  1  2 Passed!
Testing copy constructor... 1  2  3 Passed!
Testing destructor... Passed, but make sure ~Vec() is returning the array's memory to the system!
Testing =... 0  1  2  3  4  5  6  7 Passed!
Testing getSize()... 1  2 Passed!
Testing setItem()...  0  1  2 Passed!
Testing getItem()...  0  1  2 Passed!
Testing setSize()... 0  1  2  3  4 Passed!
Testing ==... 1  2  3  4  5  6  7 Passed!
Testing writeTo(ostream)... Passed! See 'vecStreamOut.txt' for values...
Testing readFrom(istream)... Passed!
Testing !=...  0  1  2  3 Passed!
Testing +...  1  2  3  4 Passed!
Testing -...  1  2  3  4 Passed!
Testing *...  1  2  3  4 Passed!
Testing readFrom()...  1  2  3 Passed! Make sure you close the file...
Testing writeTo()...  1 vecTest1Copy.txt created  2  3 vecTest2Copy.txt created  4 Passed!  Make sure you closed the file...
Testing [ ]...  0  1  2  3  4  5 Passed!
All tests passed!
]0;elc3@zuse: ~/workspace/cs112/project3elc3@zuse:~/workspace/cs112/project3$ ./Debug/project3
Would you like to run the Vec tests or run the Vec application?
Type 0 for tests or 1 for the application: 1
Enter 'C' to continue the application or 'Q' to quit: c
How many dimensions would you like to use? 3
Please enter 3 values for the starting location: 
Value 1: 1
Value 2: 2
Value 3: 3
The starting Vec is {1,2,3}
Please enter the number of Vecs you would like to create: 4
Vec1
Value 1: 1
Value 2: 1
Value 3: 1

Vec2
Value 1: 2
Value 2: 2
Value 3: 2

Vec3
Value 1: 3
Value 2: 3
Value 3: 3

Vec4
Value 1: 4
Value 2: 4
Value 3: 4

The starting Vec is {1,2,3}
The ending Vec is {11,12,13}
Enter 'C' to continue the application or 'Q' to quit: c
How many dimensions would you like to use? 2
Please enter 2 values for the starting location: 
Value 1: 0
Value 2: 1
The starting Vec is {0,1}
Please enter the number of Vecs you would like to create: 3
Vec1
Value 1: 1
Value 2: 2

Vec2
Value 1: 3
Value 2: 4

Vec3
Value 1: 5
Value 2: 65

The starting Vec is {0,1}
The ending Vec is {9,72}
Enter 'C' to continue the application or 'Q' to quit: c
How many dimensions would you like to use? 4
Please enter 4 values for the starting location: 
Value 1: 1
Value 2: 2
Value 3: 3
Value 4: 4
The starting Vec is {1,2,3,4}
Please enter the number of Vecs you would like to create: 1
Vec1
Value 1: 10
Value 2: 11
Value 3: 12
Value 4: 13

The starting Vec is {1,2,3,4}
The ending Vec is {11,13,15,17}
Enter 'C' to continue the application or 'Q' to quit: q
]0;elc3@zuse: ~/workspace/cs112/project3elc3@zuse:~/workspace/cs112/project3$ exit

Script done on Mon 02 Mar 2015 08:59:06 PM EST
