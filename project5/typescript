Script started on Mon 23 Mar 2015 11:08:12 PM EDT
]0;elc3@turing: ~/workspace/cs112/project5elc3@turing:~/workspace/cs112/project5$ ls
[0m[01;34mDebug[0m   listStreamOut.txt  ListTester.h  testFile2.txt  TestWritetoFile.txt
List.h  ListTester.cpp     tester.cpp    testFile.txt   typescript
]0;elc3@turing: ~/workspace/cs112/project5elc3@turing:~/workspace/cs112/project5$ cat List.h
/* List.h
 * Header file for the List Class
 * Created on: Mar 23, 2015
 * Student One: Ethan Clark (elc3)
 * Student Two: Elizabeth Crow (emc37)
 */

#ifndef LIST_H_
#define LIST_H_

//Includes for the List Class
#include <iostream>
#include <stdexcept>
#include <fstream>
#include <cassert>
using namespace std;

//Declaration of the template List Class
template<class Item>
class List {
public:
	List();
	virtual ~List();
	List(const List& original);
	List& operator=(const List& original);
	unsigned getSize() const;
	Item getFirst() const;
	Item getLast() const;
	void append(const Item& it);
	bool operator!=(const List& l2) const;
	void writeTo(ostream& out) const;
	void readFrom(const string& filename);
	int getIndexOf(const Item& it) const;
	Item remove(unsigned index);
	bool operator==(const List& list1) const;
	void readFrom(istream& in);
	void writeTo(const string& filename) const;
	void prepend(const Item& it);
	void insert(const Item& it, unsigned index);
private:
	struct Node {
		Node();
		virtual ~Node();
		Node(Item it, Node * next);
		Item myItem;
		Node * myNext;
	};
	unsigned mySize;
	Node * myFirst;
	Node * myLast;
	friend class ListTester;
};

//Default Constructor for the List Class
template<class Item>
List<Item>::List() {

	mySize = 0;
	myFirst = NULL;
	myLast = NULL;
}

//Destructor for the List Class
template<class Item>
List<Item>::~List() {

	delete myFirst;          // delete first node, invoking ~Node() (does nothing if myFirst == NULL)
	myFirst = myLast = NULL; // clear myFirst and myLast (optional)
	mySize = 0;              // clear mySize (optional)
}

//Default Node Constructor for the Node Struct in the List Class
template<class Item>
List<Item>::Node::Node() {

	myItem = 0;
	myNext = NULL;
}

//Explicit Node Constructor for the Node Struct in the List Class
template<class Item>
List<Item>::Node::Node(Item it, Node * next) {

	myItem = it;
	myNext = next;
}

//Destructor for the Node Struct in the List Class
template<class Item>
List<Item>::Node::~Node() {

	delete myNext;  // delete the next node, invoking ~Node() in it
	// (does nothing if myNext == NULL)
	myNext = NULL;  // clear myNext (optional)
	myItem = 0;     // clear myItem (optional)
}

//Copy Constructor for the List Class
template<class Item>
List<Item>::List(const List<Item>& original) {
	myFirst = myLast = NULL;			// set pointers
	mySize = 0;							// and size to 'empty' values
	if (original.getSize() > 0) {		// if there are nodes to copy:
		Node* oPtr = original.myFirst;	// start at the first node
		while (oPtr != NULL) {			// while there are more nodes
			append(oPtr->myItem);		// append the item in that node
			oPtr = oPtr->myNext;		// advance to next node
		}
	}
}

//Accessor Method for the List Class to return the List's Size
template<class Item>
unsigned List<Item>::getSize() const {

	return mySize;
}

//Accessor Method for the List Class to return the first item in the list
template<class Item>
Item List<Item>::getFirst() const {

	if ( mySize <= 0 or myFirst == NULL ) {
		throw underflow_error("Unable to access first element");
	}
	return myFirst->myItem;
}

//Accessor Method for the List Class to return the last item in the list
template<class Item>
Item List<Item>::getLast() const {

	if ( mySize <= 0 or myLast == NULL ) {
		throw underflow_error("Unable to access last element");
	}
	return myLast->myItem;
}

//Append an item to the current List
template<class Item>
void List<Item>::append(const Item& it) {

	Node * nodePtr = new Node(it, NULL);

	if ( mySize == 0 ) {
		myFirst = nodePtr;
	} else {
		myLast->myNext = nodePtr;
	}
	myLast = nodePtr;
	mySize += 1;
}

//Assignment Operator for the List Class
template<class Item>
List<Item>& List<Item>::operator=(const List<Item>& original) {

	if (this == &original) {
		return *this;
	}

	if (this != &original) {
		delete myFirst;
		myFirst = myLast = NULL;
		mySize = 0;
		if (original.getSize() > 0) {
			Node * nPtr = original.myFirst;
			while (nPtr != NULL) {
				append(nPtr->myItem);
				nPtr = nPtr->myNext;
			}
		}
	}
	return *this;
}

//Begin Student 2 Methods (Elizabeth Crowe)

/* operator!=(const List<Item>& l2) const is the equivalence operator and determines
 * if two lists are identical
 * written by: Elizabeth Crow (emc37)
 * @param: const List<Item>& l2 is a const reference to the second list that a
 * list is being compared to.
 */
template<class Item>
bool List<Item>::operator!=(const List& l2) const {
	if (mySize != l2.mySize) {
		return true;
	}
	Node * list1Node = myFirst;
	Node * list2Node = l2.myFirst;
	while (list1Node != NULL) {
		if (list1Node->myItem != list2Node->myItem) {
			return true;
		}
		list1Node = list1Node->myNext;
		list2Node = list2Node->myNext;
	}
	return false;
}

/* writeTo(ostream& out) const writes a list to a specified out stream
 * written by: Elizabeth Crow (emc37)
 * @param: ostream& out, where the list is written to
 */
template<class Item>
void List<Item>::writeTo(ostream& out) const {
	Node * currentNode = myFirst;
	while (currentNode != NULL) {
		out << " " << currentNode->myItem;
		currentNode = currentNode->myNext;
	}
}

/* readFrom(const string& filename) reads in a list from a specified file
 * written by: Elizabeth Crow (emc37)
 * @param: the filename containing the list elements
 */
template<class Item>
void List<Item>::readFrom(const string& filename) {
	ifstream fin(filename.c_str());
	assert (fin.is_open());
	Item it;
	while (!fin.eof()) {
		fin >> it;
		append(it);
	}
	fin.close();
}

/* getIndexOf(const Item& it) const returns the index of an item if it appears in a list.
 * Otherwise, it returns -1
 * written by: Elizabeth Crow (emc37)
 * @param: a reference to a string called filename
 */
template<class Item>
int List<Item>::getIndexOf(const Item& it) const {
	Node * currentNode = myFirst;
	int index = 0;
	while (currentNode != NULL) {
		if (currentNode->myItem == it) {
			return index;
		}
		currentNode = currentNode->myNext;
		index++;
	}
	return -1;
}

/* remove(int index) returns the element at the specified index, and deletes it from the list
 * written by: Elizabeth Crow (emc37)
 * @param: the index of the item being removed
 * Note: If index is below 0, the first item is removed. If index is
 * greater than largest valid index, the last item is removed.
 */
template<class Item>
Item List<Item>::remove(unsigned index) {
	if (mySize == 0) {
		throw range_error("This list is empty");
	}
	Item removed = 0;
	if (mySize == 1) {
		removed = myFirst->myItem;
		mySize--;
		delete myFirst;
		myFirst = myLast = NULL;
		return removed;
	}
	Node * currentNode = myFirst;
	if (index <= 0) {
		myFirst = currentNode->myNext;
		currentNode->myNext = NULL;
		removed = currentNode->myItem;
		delete currentNode;
		mySize--;
		return removed;
	}
	unsigned i = 0;
	while (i < index -1 and i < mySize - 2) {
		currentNode = currentNode->myNext;
		i++;
	}
	if (mySize <= index + 1) {
		myLast = currentNode;
	}
	Node * tempNode = currentNode->myNext;
	removed = currentNode->myNext->myItem;
	currentNode->myNext = currentNode->myNext->myNext;
	tempNode->myNext = NULL;
	delete tempNode;
	mySize--;
	return removed;
}

//End Student 2 (Elizabeth Crowe) Methods

//Begin Student 1 (Ethan Clark) Methods

/* written by: Ethan Clark (elc3)
 * Equality Operator to return true if two lists are equal and false if two lists are not equal
 * @param: List of any size values and elements
 */
template<class Item>
bool List<Item>::operator==(const List& list1) const {

	if ( mySize != list1.getSize() ) {
		return false;
	}

	Node * firstnode = myFirst;
	Node * secondnode = list1.myFirst;
	while (firstnode != NULL) {
		if (firstnode->myItem != secondnode->myItem) {
			return false;
		}
		firstnode = firstnode->myNext;
		secondnode = secondnode->myNext;
	}
	return true;
}

/* written by Ethan Clark (elc3)
 * readFrom() method to read in values for a list from an input stream
 * @param: a valid input stream
 */
template<class Item>
void List<Item>::readFrom(istream& in) {

	Item it;
	while (true) {
		in >> it;
		this->append(it);
		if (in.eof()) {
			break;
		}
	}
}

/* written by Ethan Clark (elc3)
 * writeTo() method to write a list's values to a file
 * @param: a valid string of a filename
 */
template<class Item>
void List<Item>::writeTo(const string& filename) const {

	ofstream fout( filename.c_str() );
	assert (fout.is_open());

	Node * currentnode = myFirst;
	while (currentnode != NULL) {
		fout << " " << currentnode->myItem;
		currentnode = currentnode->myNext;
	}
	fout.close();
}

/* written by Ethan Clark
 * prepend() method to add an element at the beginning of the list
 * @param: an item of the same kind as the list
 */
template<class Item>
void List<Item>::prepend(const Item& it) {

	Node * myNextPtr = myFirst->myNext;
	Node * newNode = new Node(it, myNextPtr);
	Node * currentNode = myFirst->myNext;

	if (mySize == 0) {
		myFirst = newNode;
	}
	else {
		while (currentNode != NULL) {
			myFirst = newNode;
			currentNode = currentNode->myNext;
		}
	}
}

/* written by Ethan Clark (elc3)
 * insert() method to insert an item at the given index
 * @param: item of the same kind as the list's items; valid index for the list
 */
template<class Item>
void List<Item>::insert(const Item& it, unsigned index) {

	Node * newNode = new Node(it, NULL);
	if (index <= 0) {
		Node * firstPtr = myFirst;
		newNode->myNext = firstPtr;
		myFirst = newNode;
		mySize++;
	}

	else if (index >= mySize) {
		myLast->myNext = newNode;
		myLast = newNode;
		mySize++;
	}

	else {
		Node * currentNode = myFirst;
		for (unsigned i = 0; i < index - 1; i++) {
			currentNode = currentNode->myNext;
		}
		newNode->myNext = currentNode->myNext;
		currentNode->myNext = newNode;
		mySize++;
	}
}

//End Student 1 (Ethan Clark) Methods


#endif /* LIST_H_ */
]0;elc3@turing: ~/workspace/cs112/project5elc3@turing:~/workspace/cs112/project5$ cat LIst[K[K[KistTester.cpp
/* ListTester.cpp defines the test methods for class List.
 * Student One: Ethan Clark (elc3)
 * Student Two: Elizabeth Crow (emc37)
 * March 23, 2015
 */

#include "ListTester.h" // ListTester
#include "List.h"       // List
#include <iostream>     // cin, cout
#include <cassert>      // assert()
#include <cstdlib>      // exit()
#include <stdexcept>    // underflow_error
using namespace std;

void ListTester::runTests() {
	cout << "Running List tests..." << endl;
	testDefaultConstructor();
	testNodeDefaultConstructor();
	testNodeExplicitConstructor();
	testAppend();
	testDestructor();
	testCopyConstructor();
	testAssignment();
	testEquality();
	testReadFromStream();
	testWriteToFile();
	testPrepend();
	testInsert();
	testInequality();
	testWriteToStream();
	testReadFromString();
	testGetIndexOf();
	testRemove();
	cout << "All tests passed!" << endl;
}

void ListTester::testDefaultConstructor() {
	cout << "Testing List default constructor... " << flush;
	List<double> aList;
	assert( aList.mySize == 0 );
	assert( aList.myFirst == NULL );
	assert( aList.myLast == NULL );
	cout << "Passed!" << endl;
}

void ListTester::testNodeDefaultConstructor() {
	cout << "Testing Node default constructor... " << flush;
	List<double>::Node aNode;
	assert( aNode.myItem == 0 );
	assert( aNode.myNext == NULL );
	cout << "Passed!" << endl;
}

void ListTester::testNodeExplicitConstructor() {
	cout << "Testing Node explicit constructor... " << flush;
	List<double>::Node n1(11, NULL);
	assert( n1.myItem == 11 );
	assert( n1.myNext == NULL );
	cout << " 1 " << flush;

	List<double>::Node *n3 = new List<double>::Node(33, NULL);
	List<double>::Node n2(22, n3);
	assert( n2.myItem == 22 );
	assert( n2.myNext == n3 );
	cout << " 2 " << flush;
	cout << "Passed!" << endl;
}

void ListTester::testAppend() {
	cout << "Testing append()... " << flush;
	// empty List
	List<double> aList;
	assert( aList.getSize() == 0 );
	assert( aList.myFirst == NULL );
	assert( aList.myLast == NULL );
	try {
		aList.getFirst();
		cerr << "getFirst() worked on empty list" << endl;
		exit(1);
	} catch (underflow_error&) {
		cout << " 0a " << flush;
	}
	try {
		aList.getLast();
		cerr << "getLast() worked on empty list" << endl;
		exit(1);
	} catch (underflow_error&) {
		cout << " 0b " << flush;
	}
	// append to empty list
	aList.append(11);
	assert( aList.getSize() == 1 );
	assert( aList.myFirst != NULL );
	assert( aList.myLast == aList.myFirst );
	assert( aList.getFirst() == 11 );
	assert( aList.getLast() == 11 );
	assert( aList.myFirst->myNext == NULL );
	cout << " 1 " << flush;
	// append to a list containing 1 Item
	aList.append(22);
	assert( aList.getSize() == 2 );
	assert( aList.myFirst != NULL );
	assert( aList.myLast != NULL );
	assert( aList.myFirst != aList.myLast );
	assert( aList.getFirst() == 11 );
	assert( aList.getLast() == 22 );
	assert( aList.myFirst->myNext != NULL );
	assert( aList.myLast->myNext == NULL );
	cout << " 2 " << flush;
	// append to a list containing 2 Items
	aList.append(33);
	assert( aList.getSize() == 3 );
	assert( aList.myFirst != NULL );
	assert( aList.myLast != NULL );
	assert( aList.getFirst() == 11 );
	assert( aList.getLast() == 33 );
	assert( aList.myFirst->myNext->myItem == 22 );
	assert( aList.myLast->myNext == NULL );
	cout << " 3 " << flush;
	cout << "Passed!" << endl;
}

void ListTester::testDestructor() {
	cout << "Testing destructor... " << flush;
	List<double> aList;
	aList.~List();
	assert( aList.getSize() == 0 );
	assert( aList.myFirst == NULL );
	assert( aList.myLast == NULL );
	cout << " 1 " << flush;

	aList.append(11);
	aList.append(22);
	aList.append(33);
	aList.~List();
	assert( aList.getSize() == 0 );
	assert( aList.myFirst == NULL );
	assert( aList.myLast == NULL );
	cout << " 2 " << flush;
	cout << "Passed!  But double-check for memory leaks!" << endl;
}

void ListTester::testCopyConstructor() {
	cout << "Testing copy constructor... " << flush;
	// copy empty list
	List<double> list1;
	List<double> list2(list1);
	assert( list2.getSize() == 0 );
	assert( list2.myFirst == NULL );
	assert( list2.myLast == NULL );
	cout << " 1 " << flush;

	// copy nonempty list
	List<double> list3;
	list3.append(11);
	list3.append(22);
	list3.append(33);
	List<double> list4(list3);
	assert( list4.getSize() == 3 );
	assert( list4.getFirst() == 11 );
	assert( list4.getLast() == 33 );
	assert( list4.myFirst->myNext->myItem == 22 );
	assert( list4.myFirst != list3.myFirst );
	assert( list4.myLast != list3.myLast );
	cout << " 2 " << flush;
	cout << "Passed!" << endl;
}

void ListTester::testAssignment() {
	cout << "Testing assignment... " << flush;
	// empty to empty assignment
	List<double> list1;
	List<double> list2;
	list2 = list1;
	assert( list2.getSize() == 0 );
	assert( list2.myFirst == NULL );
	assert( list2.myLast == NULL );
	cout << " 1 " << flush;

	// non-empty to empty assignment
	List<double> list3;
	list3.append(11);
	list3.append(22);
	list3.append(33);
	List<double> list4;
	list4 = list3;
	assert( list4.getSize() == 3 );
	assert( list4.getFirst() == 11 );
	assert( list4.getLast() == 33 );
	assert( list4.myFirst->myNext->myItem == 22 );
	cout << " 2 " << flush;

	// equal-sized non-empty to non-empty assignment
	List<double> list5;
	list5.append(44);
	list5.append(55);
	list5.append(66);
	list5 = list3;
	assert( list5.getSize() == 3 );
	assert( list5.getFirst() == 11 );
	assert( list5.getLast() == 33 );
	assert( list5.myFirst->myNext->myItem == 22 );
	cout << " 3 " << flush;

	// empty to non-empty assignment
	List<double> list6;
	list6.append(44);
	list6.append(55);
	list6.append(66);
	List<double> list7;
	list6 = list7;
	assert( list6.getSize() == 0 );
	assert( list6.myFirst == NULL );
	assert( list6.myLast == NULL );
	cout << " 4 " << flush;

	// unequal-sized non-empty to non-empty assignment
	List<double> list8;
	list8.append(44);
	list8.append(55);
	list8.append(66);
	list8.append(77);
	list8 = list3;
	assert( list8.getSize() == 3 );
	assert( list8.getFirst() == 11 );
	assert( list8.getLast() == 33 );
	assert( list8.myFirst->myNext->myItem == 22 );
	cout << " 5 " << flush;

	// assignment chaining
	List<double> list9;
	list9.append(44);
	list9.append(55);
	list9.append(66);
	list9.append(77);
	List<double> list10;
	list10 = list9 = list8;
	assert( list10.getSize() == 3 );
	assert( list10.getFirst() == 11 );
	assert( list10.getLast() == 33 );
	assert( list10.myFirst->myNext->myItem == 22 );
	cout << " 6 " << flush;

	// self-assignment (stupid, but possible)
	List<double> list11;
	list11.append(11);
	list11.append(22);
	list11.append(33);
	list11 = list11;
	assert( list11.getSize() == 3 );
	assert( list11.getFirst() == 11 );
	assert( list11.getLast() == 33 );
	assert( list11.myFirst->myNext->myItem == 22 );
	cout << " 7 " << flush;

	cout << "Passed!  But double-check for memory leaks!" << endl;
}

//Equality Test Method written by Ethan Clark (elc3)
void ListTester::testEquality() {
	cout << "Testing equality... " << flush;
	// two empty lists
	List<double> list1;
	List<double> list2;
	assert( list1 == list1 );
	cout << " 1 " << flush;

	// a non-empty list
	List<double> list3;
	list3.append(33);		// [33]
	assert( !(list3 == list1) );
	cout << " 2 " << flush;

	// equal, non-empty lists of the same size
	List<double> list4;
	list4.append(33);		// [33]
	assert( list4 == list3 );
	assert( list3 == list4 );
	cout << " 3 " << flush;

	// unequal, non-empty lists of the same size
	list3.append(55);		// [33,55]
	List<double> list5;
	list5.append(44);		// [44]
	list5.append(55);		// [44,55]
	assert( !(list5 == list3) );
	assert( !(list3 == list5) );
	cout << " 4 " << flush;

	// unequal non-empty lists of different sizes
	list4.append(44);		// [33,44]
	list4.append(55);		// [33,44,55]
	assert( !(list4 == list5) );
	assert( !(list5 == list4) );
	assert( !(list5 == list3) );
	cout << " 5 " << flush;

	cout << "Passed!" << endl;
}

//ReadFromStream test written by Ethan Clark (elc3)
void ListTester::testReadFromStream() {

	cout << "Testing ReadFromStream... " << flush;

	ifstream fin("testFile.txt");
	assert( fin.is_open() );
	List<double> list1;
	list1.readFrom(fin);
	assert (list1.mySize == 5);
	assert( list1.myFirst->myItem == 1);
	assert( list1.myLast->myItem == 5);
	assert( list1.getIndexOf(2) == 1);
	assert( list1.getIndexOf(3) == 2);
	assert( list1.getIndexOf(4) == 3);
	cout << " 1 " << flush;

	ifstream fin1("testFile2.txt");
	assert ( fin1.is_open() );
	List<double> list2;
	list2.readFrom(fin1);
	assert( list2.mySize);
	assert( list2.mySize == 3);
	assert( list2.myFirst->myItem == 1);
	assert( list2.myLast->myItem == 3);
	assert( list2.getIndexOf(2) == 1);
	cout << " 2 " << flush;

	cout << "Passed!" << endl;
}

//WriteToFile test written by Ethan Clark (elc3)
void ListTester::testWriteToFile() {

	cout << "Testing WriteToFile... " << flush;

	List<double> list1;
	for (unsigned i = 0; i < 6; i++) {
		list1.append(i+1);
	}
	list1.writeTo("TestWritetoFile.txt");

	List<double> list2;
	list2.readFrom("TestWritetoFile.txt");
	assert (list2.mySize == 6);
	for (int i = 0; i < 5; i++) {
		assert (list2.getIndexOf(i+1) == i);
	}

	cout << "Passed!" << endl;
}

//Prepend test written by Ethan Clark (elc3)
void ListTester::testPrepend() {

	cout << "Testing Prepend... " << flush;

	// prepend to empty list
	List<double> list1;
	list1.append(11);
	assert( list1.getSize() == 1 );
	assert( list1.myFirst != NULL );
	assert( list1.myLast == list1.myFirst );
	assert( list1.getFirst() == 11 );
	assert( list1.getLast() == 11 );
	assert( list1.myFirst->myNext == NULL );
	cout << " 1 " << flush;

	// prepend to a list containing 1 Item
	list1.append(22);
	assert( list1.getSize() == 2 );
	assert( list1.myFirst != NULL );
	assert( list1.myLast != NULL );
	assert( list1.myFirst != list1.myLast );
	assert( list1.getFirst() == 11 );
	assert( list1.getLast() == 22 );
	assert( list1.myFirst->myNext != NULL );
	assert( list1.myLast->myNext == NULL );
	cout << " 2 " << flush;

	// prepend to a list containing 2 Items
	list1.append(33);
	assert( list1.getSize() == 3 );
	assert( list1.myFirst != NULL );
	assert( list1.myLast != NULL );
	assert( list1.getFirst() == 11 );
	assert( list1.getLast() == 33 );
	assert( list1.myFirst->myNext->myItem == 22 );
	assert( list1.myLast->myNext == NULL );
	cout << " 3 " << flush;

	cout << "Passed!" << endl;
}

//Insert test written by Ethan Clark (elc3)
void ListTester::testInsert() {

	cout << "Testing Insert... " << flush;

	//Insert to an empty list
	List<double> list1;
	list1.insert(11, 0);
	assert (list1.mySize == 1);
	assert (list1.myFirst->myItem == 11);
	assert (list1.myFirst->myNext == NULL);
	cout << " 1 " << flush;

	cout << "Passed!" << endl;

}

// Test written by Elizabeth Crow (emc37)
void ListTester::testInequality() {
	cout << "Testing inequality... " << flush;
	//	 two empty lists
	List<int> list1;
	List<int> list2;
	assert( !(list1 != list1) );
	cout << " 1 " << flush;

	// a non-empty list
	List<int> list3;
	list3.append(33);		// [33]
	assert( list3 != list1);
	cout << " 2 " << flush;

	// equal, non-empty lists of the same size
	List<int> list4;
	list4.append(33);		// [33]
	assert( !(list4 != list3) );
	assert( !(list3 != list4) );
	cout << " 3 " << flush;

	// unequal, non-empty lists of the same size
	list3.append(55);		// [33,55]
	List<int> list5;
	list5.append(44);		// [44]
	list5.append(55);		// [44,55]
	assert( list5 != list3);
	assert( list3 != list5);
	cout << " 4 " << flush;

	// unequal non-empty lists of different sizes
	list4.append(44);		// [33,44]
	list4.append(55);		// [33,44,55]
	assert( list4 != list5);
	assert( list5 != list4);
	assert( list5 != list3);
	cout << " 5 " << flush;

	cout << "Passed!" << endl;
}

// Test written by Elizabeth Crow (emc37)
void ListTester::testWriteToStream() {
	cout << "Testing writeTo(ostream)... " << flush;

	List<double> l1;
	for (unsigned i = 0.0; i < 5.0; i++) {
		l1.append(i+1);
	}
	// write to an ofstream instead of cout, to automate the test
	ofstream fout("listStreamOut.txt");
	assert( fout.is_open() );
	l1.writeTo(fout);
	fout.close();
	// then read in what was written out
	List<double> l2;
	l2.readFrom("listStreamOut.txt");
	assert( l2.mySize == 5);
	for (int i = 0; i < 5; i++) {
		assert( l2.getIndexOf(i + 1) == i );
	}

	cout << "Passed!" << endl;
}

// Test written by Elizabeth Crow (emc37)
void ListTester::testReadFromString() {
	cout << "Testing readFrom(string)... " << flush;

	List<int> l1;
	l1.readFrom("testFile.txt");
	assert( l1.mySize == 5);
	assert( l1.myFirst->myItem == 1);
	assert( l1.myLast->myItem == 5);
	assert( l1.getIndexOf(2) == 1);
	assert( l1.getIndexOf(3) == 2);
	assert( l1.getIndexOf(4) == 3);
	cout << " 1 " << flush;

	List<int> l2;
	l2.readFrom("testFile2.txt");
	cout << l2.mySize;
	assert( l2.mySize == 3);
	assert( l2.myFirst->myItem == 1);
	assert( l2.myLast->myItem == 3);
	assert( l2.getIndexOf(2) == 1);
	cout << " 2 " << flush;

	cout << "Passed!" << endl;
}

// Test written by Elizabeth Crow (emc37)
void ListTester::testGetIndexOf() {
	cout << "Testing getIndexOf(Item)... " << flush;

	// empty list
	List<int> l1;
	assert( l1.getIndexOf(1) == -1);
	cout << " 1 " << flush;

	// non-empty list
	List<int> l2;
	l2.append(11);
	l2.append(22);
	assert( l2.getIndexOf(11) == 0);
	assert( l2.getIndexOf(22) == 1);
	assert( l2.getIndexOf(33) == -1);
	cout << " 2 " << flush;

	// non-empty list with repeated occurrences of the same element
	List<int> l3;
	l3.append(11);
	l3.append(11);
	assert( l3.getIndexOf(11) == 0);
	assert( l3.getIndexOf(11) != 1);
	cout << " 3 " << flush;

	cout << "Passed!" << endl;
}

// Test written by Elizabeth Crow (emc37)
void ListTester::testRemove() {
	cout << "Testing remove(index)... " << flush;
	//	empty list
	List<int> l1;
	try {
		l1.remove(0);
		cerr << "remove() worked on an empty list" << endl;
		exit(1);
	} catch (range_error&) {
		cout << " 1 " << flush;
	}

	//	list with 1 element
	List<int> l2;
	l2.append(11);
	int removed;
	removed = l2.remove(0);
	assert( removed == 11);
	assert( l2.myFirst == l2.myLast);
	assert( l2.myFirst == NULL);
	assert( l2.myLast == NULL);
	assert(l2.mySize == 0);
	cout << " 2 " << flush;

	//	non-empty list with more than 1 element- removing the first item
	List<int> l3;
	l3.append(11);
	l3.append(22);
	l3.append(33);
	l3.append(44);
	removed = l3.remove(0);
	assert( removed == 11);
	assert( l3.mySize == 3);
	assert( l3.getIndexOf(11) == -1);
	assert( l3.getIndexOf(22) == 0);
	assert( l3.myFirst->myItem == 22);
	cout << " 3a " << flush;

	removed = l3.remove(0);
	assert( removed == 22);
	assert( l3.mySize == 2);
	assert( l3.getIndexOf(22) == -1);
	assert( l3.getIndexOf(33) == 0);
	assert( l3.myFirst->myItem == 33);
	cout << " 3b " << flush;

	//	non-empty list with more than 1 element- removing the last item
	List<int> l4;
	l4.append(11);
	l4.append(22);
	l4.append(33);
	l4.append(44);
	removed = l4.remove(3);
	assert( removed == 44);
	assert( l4.mySize == 3);
	assert( l4.getIndexOf(11) == 0);
	assert( l4.getIndexOf(44) == -1);
	assert( l4.myLast->myItem == 33);
	cout << " 4a " << flush;

	removed = l4.remove(50);
	assert( removed == 33);
	assert( l4.mySize == 2);
	assert( l4.getIndexOf(11) == 0);
	assert( l4.getIndexOf(33) == -1);
	assert( l4.myLast->myItem == 22);
	cout << " 4b " << flush;

	//	non-empty list with more than 1 element- removing an item in the middle
	List<int> l5;
	l5.append(11);
	l5.append(22);
	l5.append(33);
	l5.append(44);
	l5.append(55);
	removed = l5.remove(2);
	assert( removed == 33);
	assert( l5.mySize == 4);
	assert( l5.getIndexOf(44) == 2);
	assert( l5.getIndexOf(55) == 3);
	cout << " 5 " << flush;

	cout << "Passed!" << endl;
}
]0;elc3@turing: ~/workspace/cs112/project5elc3@turing:~/workspace/cs112/project5$ cat ListTester.h
/* ListTester.h declares the test-class for class List.
 * Student One: Ethan Clark (elc3)
 * Student Two: Elizabeth Crow (emc37)
 */

#ifndef LISTTESTER_H_
#define LISTTESTER_H_

class ListTester {
public:
	void runTests();
	void testDefaultConstructor();
	void testNodeDefaultConstructor();
	void testNodeExplicitConstructor();
	void testAppend();
	void testDestructor();
	void testCopyConstructor();
	void testAssignment();
	void testEquality();
	void testReadFromStream();
	void testWriteToFile();
	void testPrepend();
	void testInsert();
	void testInequality();
	void testWriteToStream();
	void testReadFromString();
	void testGetIndexOf();
	void testRemove();
};

#endif /*LISTTESTER_H_*/
]0;elc3@turing: ~/workspace/cs112/project5elc3@turing:~/workspace/cs112/project5$ ls
[0m[01;34mDebug[0m   listStreamOut.txt  ListTester.h  testFile2.txt  TestWritetoFile.txt
List.h  ListTester.cpp     tester.cpp    testFile.txt   typescript
]0;elc3@turing: ~/workspace/cs112/project5elc3@turing:~/workspace/cs112/project5$ cat testFile.txt
c1 2 3 4 5]0;elc3@turing: ~/workspace/cs112/project5elc3@turing:~/workspace/cs112/project5$ c[Kcat testFile1[K2.txt
1 2 3]0;elc3@turing: ~/workspace/cs112/project5elc3@turing:~/workspace/cs112/project5$ cat Teste[KWriteToFile.txt
cat: TestWriteToFile.txt: No such file or directory
]0;elc3@turing: ~/workspace/cs112/project5elc3@turing:~/workspace/cs112/project5$ cat TestWritetoFile.txt
 1 2 3 4 5 6]0;elc3@turing: ~/workspace/cs112/project5elc3@turing:~/workspace/cs112/project5$ cat T[KlistStreamOut.txt
 1 2 3 4 5]0;elc3@turing: ~/workspace/cs112/project5elc3@turing:~/workspace/cs112/project5$ ls
[0m[01;34mDebug[0m   listStreamOut.txt  ListTester.h  testFile2.txt  TestWritetoFile.txt
List.h  ListTester.cpp     tester.cpp    testFile.txt   typescript
]0;elc3@turing: ~/workspace/cs112/project5elc3@turing:~/workspace/cs112/project5$ cd Debug
]0;elc3@turing: ~/workspace/cs112/project5/Debugelc3@turing:~/workspace/cs112/project5/Debug$ ls
ListTester.d  makefile    [0m[01;32mproject5[0m    subdir.mk  tester.o
ListTester.o  objects.mk  sources.mk  tester.d
]0;elc3@turing: ~/workspace/cs112/project5/Debugelc3@turing:~/workspace/cs112/project5/Debug$ make
make: Nothing to be done for `ListTester.d'.
]0;elc3@turing: ~/workspace/cs112/project5/Debugelc3@turing:~/workspace/cs112/project5/Debug$ cd ..
]0;elc3@turing: ~/workspace/cs112/project5elc3@turing:~/workspace/cs112/project5$ cd ./Debug/project5
bash: cd: ./Debug/project5: Not a directory
]0;elc3@turing: ~/workspace/cs112/project5elc3@turing:~/workspace/cs112/project5$ ./debug/project5
bash: ./debug/project5: No such file or directory
]0;elc3@turing: ~/workspace/cs112/project5elc3@turing:~/workspace/cs112/project5$ ./Debug/project[K[K[K[K[K[K[K[K[K[K[K[K[K[K[Kls
[0m[01;34mDebug[0m   listStreamOut.txt  ListTester.h  testFile2.txt  TestWritetoFile.txt
List.h  ListTester.cpp     tester.cpp    testFile.txt   typescript
]0;elc3@turing: ~/workspace/cs112/project5elc3@turing:~/workspace/cs112/project5$ ./Debug/project5
Running List tests...
Testing List default constructor... Passed!
Testing Node default constructor... Passed!
Testing Node explicit constructor...  1  2 Passed!
Testing append()...  0a  0b  1  2  3 Passed!
Testing destructor...  1  2 Passed!  But double-check for memory leaks!
Testing copy constructor...  1  2 Passed!
Testing assignment...  1  2  3  4  5  6  7 Passed!  But double-check for memory leaks!
Testing equality...  1  2  3  4  5 Passed!
Testing ReadFromStream...  1  2 Passed!
Testing WriteToFile... Passed!
Testing Prepend...  1  2  3 Passed!
Testing Insert...  1 Passed!
Testing inequality...  1  2  3  4  5 Passed!
Testing writeTo(ostream)... Passed!
Testing readFrom(string)...  1 3 2 Passed!
Testing getIndexOf(Item)...  1  2  3 Passed!
Testing remove(index)...  1  2  3a  3b  4a  4b  5 Passed!
All tests passed!
]0;elc3@turing: ~/workspace/cs112/project5elc3@turing:~/workspace/cs112/project5$ exit

Script done on Mon 23 Mar 2015 11:11:01 PM EDT
